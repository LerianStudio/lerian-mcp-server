name: Package Release Manager

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.2.3)'
        required: true
        type: string

permissions:
  contents: read
  packages: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            exit 1
          fi

  publish-npm:
    name: Publish to NPM Registry
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.validate-release.outputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          scope: '@midaz'

      - name: Verify package version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_VERSION="${{ needs.validate-release.outputs.version }}"
          if [ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "Error: Package version ($PACKAGE_VERSION) doesn't match expected version ($EXPECTED_VERSION)"
            exit 1
          fi

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Check NPM publish status
        id: check_npm
        run: |
          if npm view @midaz/mcp-server@${{ needs.validate-release.outputs.version }} version 2>/dev/null; then
            echo "Package already published"
            echo "already_published=true" >> $GITHUB_OUTPUT
          else
            echo "Package not yet published"
            echo "already_published=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.check_npm.outputs.already_published == 'false'
        run: |
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify NPM publication
        if: steps.check_npm.outputs.already_published == 'false'
        run: |
          sleep 10
          npm view @midaz/mcp-server@${{ needs.validate-release.outputs.version }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.validate-release.outputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@lerianstudio'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Configure package for GitHub
        run: |
          # Create a modified package.json for GitHub Packages
          node -e "
          const pkg = require('./package.json');
          pkg.name = '@lerianstudio/midaz-mcp-server';
          pkg.publishConfig = {
            registry: 'https://npm.pkg.github.com'
          };
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-docker-tags:
    name: Update Docker Tags
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: vars.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create version tags
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # GitHub Container Registry
          docker buildx imagetools create \
            ghcr.io/lerianstudio/midaz-mcp-server:sha-${GITHUB_SHA:0:7} \
            --tag ghcr.io/lerianstudio/midaz-mcp-server:$VERSION \
            --tag ghcr.io/lerianstudio/midaz-mcp-server:latest
          
          # Docker Hub (if credentials are configured)
          if [ -n "${{ vars.DOCKERHUB_USERNAME }}" ]; then
            docker buildx imagetools create \
              ghcr.io/lerianstudio/midaz-mcp-server:sha-${GITHUB_SHA:0:7} \
              --tag midaz/mcp-server:$VERSION \
              --tag midaz/mcp-server:latest
          fi

  create-release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [validate-release, publish-npm, publish-github-packages]
    if: github.event_name == 'release'
    steps:
      - name: Update release notes
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const releaseId = context.payload.release.id;
            
            const currentBody = context.payload.release.body || '';
            const additionalNotes = `
            
            ## ðŸ“¦ Installation
            
            ### NPM
            \`\`\`bash
            npm install -g @midaz/mcp-server@${version}
            # or
            npx @midaz/mcp-server@${version}
            \`\`\`
            
            ### Docker
            \`\`\`bash
            docker pull ghcr.io/lerianstudio/midaz-mcp-server:${version}
            docker run -it ghcr.io/lerianstudio/midaz-mcp-server:${version}
            \`\`\`
            
            ### GitHub Packages
            \`\`\`bash
            npm install -g @lerianstudio/midaz-mcp-server@${version} --registry=https://npm.pkg.github.com
            \`\`\`
            `;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: currentBody + additionalNotes
            });